# -*- coding: utf-8 -*-
"""
/***************************************************************************
 MonPyqgis
                                 A QGIS plugin
 un plugin 
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-02-06
        git sha              : $Format:%H$
        copyright            : (C) 2025 by ENSG
        email                : thiriot2002@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QEvent
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.core import QgsProject, QgsWkbTypes, QgsCoordinateReferenceSystem, QgsCoordinateTransform, QgsPointXY, QgsFeature, QgsVectorLayer, QgsFillSymbol, QgsSimpleFillSymbolLayer, QgsLineSymbol, QgsSingleSymbolRenderer
from qgis.gui import QgsMapTool, QgsMapToolEmitPoint

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .pyqgis_plugin_dialog import MonPyqgisDialog
import os.path
import time
from qgis.PyQt.QtGui import (
QColor,
)

from qgis.PyQt.QtCore import Qt, QRectF

from qgis.PyQt.QtWidgets import QMenu

from qgis.core import (
QgsVectorLayer,
QgsPoint,
QgsPointXY,
 QgsProject,
 QgsGeometry,
QgsMapRendererJob,
QgsWkbTypes,
)

from qgis.gui import (
 QgsMapCanvas,
 QgsVertexMarker,
 QgsMapCanvasItem,
 QgsMapMouseEvent,
QgsRubberBand
 )

import requests

class MonPyqgis:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'MonPyqgis_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Plugin Sympa')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None
        self.canvas = self.iface.mapCanvas()
        
    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('MonPyqgis', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/pyqgis_plugin/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'something'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Plugin Sympa'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = MonPyqgisDialog()

            self.liste_couches_points()

        # show the dialog
        self.dlg.show()
        #accès a la carte
        self.dlg.button_u2.clicked.connect(self.initie_canvas)
        # Run the dialog event loop
        result = self.dlg.exec_()
        self.dlg.quitter.clicked.connect(self.quitter_dialog)
            
        # See if OK was pressed
        if result:
            pass

    def liste_couches_points(self):   
        point_layers = [
            layer.name() for layer in QgsProject.instance().mapLayers().values()
            if layer.type() == layer.VectorLayer and layer.geometryType() == QgsWkbTypes.PointGeometry
        ]
        for couche in point_layers:
            self.dlg.liste_c_points.addItem(couche)
     
    def initie_canvas(self, event):

        #self.dlg.hide()
        self.dlg.longi.setText("XXX")
        self.dlg.lati.setText("XXX")
        #activer le cliquage de la carte
        self.pointTool = QgsMapToolEmitPoint(self.canvas)
        self.pointTool.canvasClicked.connect(self.displayPoint)
        self.canvas.setMapTool(self.pointTool)
        #enregistrer coords

        #reprojeter
        
        #afficher
    
    def displayPoint(self, point, button):
          
        self.clicked_point = QgsPointXY(point)
        crs_origin = self.canvas.mapSettings().destinationCrs()
        crs_dest = QgsCoordinateReferenceSystem("EPSG:4326") 
        transform = QgsCoordinateTransform(crs_origin, crs_dest, QgsProject.instance())
        pt_reproj = transform.transform(self.clicked_point)
        longitude = round(pt_reproj.x(), 5)
        latitude = round(pt_reproj.y(), 5)
        self.dlg.longi.setText(str(longitude))  
        self.dlg.lati.setText(str(latitude))  
        self.affiche_rue(longitude,latitude)
        self.nb_points_dans_buffer(longitude,latitude)

    def affiche_rue(self,longitude,latitude):

        url = f"https://data.geopf.fr/geocodage/reverse?lat={latitude}&lon={longitude}"
        response = requests.get(url)
        rue = response.json()
        features = rue['features']

        if features:
            # Afficher seulement la première donnée
            feature = features[0]  # Récupérer uniquement le premier élément
            properties = feature['properties']
            label = properties.get('label', 'No label available')
            self.dlg.adresse.setText(str(label))

    

    def nb_points_dans_buffer(self, longitude, latitude):
        # Récupère la valeur de la couche vecteur
        couche_vec = self.dlg.liste_c_points.currentText()
        point = QgsPointXY(longitude, latitude)
        buffer_value = self.dlg.buffer.value()

        source_crs = QgsCoordinateReferenceSystem("EPSG:4326")  # WGS84
        target_crs = QgsCoordinateReferenceSystem("EPSG:3857")  # Web Mercator (mètres)
        transform = QgsCoordinateTransform(source_crs, target_crs, QgsProject.instance())
     
        point_a_bufferise = QgsGeometry.fromPointXY(self.clicked_point)

        # Crée le buffer autour du point projeté (en mètres)
        self.buff_zone = point_a_bufferise.buffer(buffer_value, 10)  

        # Récupère la couche sélectionnée
        layers = QgsProject.instance().mapLayersByName(couche_vec)

        layer = layers[0]  # Récupère la première couche trouvée
        count = 0
        layer_crs = layer.crs()

        # Si la couche n'est pas en EPSG:3857, on la reprojette dans EPSG:3857
        if layer_crs.authid() != "EPSG:3857":
            layer_transform = QgsCoordinateTransform(layer_crs, target_crs, QgsProject.instance())
        
        # Parcours chaque entité de la couche
        for feature in layer.getFeatures():
            if layer_crs.authid() != "EPSG:3857":
                feature_geometry = feature.geometry()
                feature_geometry.transform(layer_transform)
            else:
                feature_geometry = feature.geometry()

            # Vérifie si l'entité intersecte le tampon
            if self.buff_zone.intersects(feature_geometry):
                count += 1

        # Afficher ou récupérer le nombre d'éléments dans le buffer
        self.dlg.nb_objets.setText("Nombre de points dans le buffer : " + str(count))
        self.affiche_buffer()
        

    def affiche_buffer(self):
        #initialise l'objet géométrique du buffer a l'EPSG correspondant
                buffer_layer = QgsVectorLayer(f"Polygon?crs=EPSG:3857", "Buffer Layer", "memory")
                provider = buffer_layer.dataProvider()
                feature = QgsFeature()
        # reprend l'attribut buffer initié précedemment
                feature.setGeometry(self.buff_zone) 
                provider.addFeature(feature)
                buffer_layer.updateExtents()
        # création de la symbologie
                fill_symbol = QgsFillSymbol.createSimple({
                'color': 'transparent', 
                'outline_color': self.dlg.coul_tampon.currentText(),  
                'outline_width': self.dlg.larg_contour.value()/10 
            })
    
               
                renderer = QgsSingleSymbolRenderer(fill_symbol)
                buffer_layer.setRenderer(renderer)
                buffer_layer.triggerRepaint() 
        # vérification d'une couche au nom similaire pour suppression puis re-création
                layer_buffer = QgsProject.instance().mapLayersByName("Buffer Layer")
                if layer_buffer:
                    layer_main = layer_buffer[0]
                    QgsProject.instance().removeMapLayer(layer_main.id()) 
                    QgsProject.instance().addMapLayer(buffer_layer)
                else:
                    QgsProject.instance().addMapLayer(buffer_layer)

    def quitter_dialog(self):
        self.dlg.hide()